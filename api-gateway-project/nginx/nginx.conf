events {
    worker_connections 1024;
}

http {
    # Configurazione della cache
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=1h use_temp_path=off;

    upstream api_gateway {
        # Lista delle repliche del tuo API Gateway
        server api-gateway-1:8080 max_fails=3 fail_timeout=3s;
        server api-gateway-2:8080 max_fails=3 fail_timeout=3s;
        server api-gateway-3:8080 max_fails=3 fail_timeout=3s;
    }

    server {
        listen 80;

        # Imposta i timeout più aggressivi
        proxy_connect_timeout 3s;  # Timeout per la connessione
        proxy_send_timeout 3s;     # Timeout per inviare la richiesta
        proxy_read_timeout 3s;     # Timeout per leggere la risposta

        # API Gateway routing
        location / {
            # Bilanciamento del carico verso i gateway
            proxy_pass http://api_gateway;  # Inoltra il traffico ai gateway

            # Imposta gli header corretti per la connessione
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Gestione del fallimento
            error_page 502 503 504 = @fallback;
        }

        # Gestisci l'endpoint /token per ottenere il token JWT
        location /token {
            proxy_pass http://api_gateway;  # Inoltra al gateway che gestisce l'autenticazione
            
            # Imposta gli header corretti per la connessione
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Gestione del fallimento
            error_page 502 503 504 = @fallback;
        }

        # Products microservice routing tramite gateway
        location /products {
            proxy_pass http://api_gateway;  # Passa attraverso il gateway

            # Impostazioni per il caching
            proxy_cache my_cache;
            proxy_cache_valid 200 1m;  # Memorizza nella cache per 1 minuto
            proxy_cache_use_stale error timeout updating;  # Usa la cache obsoleta in caso di errore
            proxy_cache_background_update on;
            proxy_cache_lock on;
            add_header X-Cache-Status $upstream_cache_status;

            # Imposta gli header corretti per la connessione
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Gestione del fallimento
            error_page 502 503 504 = @fallback;
        }

        # Users microservice routing tramite gateway
        location /users {
            proxy_pass http://api_gateway;  # Passa attraverso il gateway

            # Impostazioni per il caching
            proxy_cache my_cache;
            proxy_cache_valid 200 1m;  # Memorizza nella cache per 1 minuto
            proxy_cache_use_stale error timeout updating;  # Usa la cache obsoleta in caso di errore
            proxy_cache_background_update on;
            proxy_cache_lock on;
            add_header X-Cache-Status $upstream_cache_status;

            # Imposta gli header corretti per la connessione
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Gestione del fallimento
            error_page 502 503 504 = @fallback;
        }

        # Gestione fallback quando tutti i gateway sono giù
        location @fallback {
            internal;
            add_header Content-Type text/plain;
            return 503 'Service temporarily unavailable, please try again later';
        }
    }
}